<launch>
   <arg name="multi_robot_name" default=""/>
   <arg name="set_lidar_frame_id" default="base_scan"/>
   <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>

   <include file="$(find turtlebot3_bringup)/launch/turtlebot3_core.launch">
    <arg name="multi_robot_name" value="$(arg multi_robot_name)"/>
  </include>

   <node pkg="octoliner" type="servo.py" name="servo" output="screen"/>
   
   <!-- <node pkg="move" type="g_robo_control.py" name="move" output="screen"/> -->
   
   <!-- Узел для камеры -->
  <node pkg="cv_camera" type="cv_camera_node" name="cv_camera" output="screen">
    <param name="camera_info_url" value="package://turtlebot3_bringup/camera_info/turtlebot3_rpicamera.yaml"/>
    <param name="image_width" value="640"/>
    <param name="image_height" value="480"/>
    <param name="rate" value="30"/>
    <param name="frame_id" value="camera"/>    
    <remap from="/cv_camera/set_camera_info" to="/camera/set_camera_info" />
    <remap from="/cv_camera/camera_info" to="/camera/camera_info" />
    <remap from="/cv_camera/image_raw" to="/camera/image_raw" />
  </node>

  <!-- Узел сжатия изображения -->
  <node pkg="image_transport" type="republish" name="image_compressed" output="screen">
    <param name="input_transport" value="raw"/>
    <param name="output_transport" value="compressed"/>
    <remap from="in" to="/camera/image_raw" />
    <remap from="out/compressed" to="/camera/image_compressed" />
  </node>
   
   


  
  <!-- <include file="$(find turtlebot3_bringup)/launch/turtlebot3_lidar.launch">
    <arg name="set_frame_id" value="$(arg set_lidar_frame_id)"/>
  </include>
  <node pkg="turtlebot3_bringup" type="turtlebot3_diagnostics" name="turtlebot3_diagnostics" output="screen"/>

  <group if = "$(eval model == 'waffle_pi')">
    <include file="$(find turtlebot3_bringup)/launch/turtlebot3_rpicamera.launch"/>
  </group> -->


</launch>